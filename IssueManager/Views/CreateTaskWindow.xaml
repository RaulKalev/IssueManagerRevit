<Window
    x:Class="IssueManager.Views.CreateTaskWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:IssueManager"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
    Title="Create New Task"
    Width="250"
    AllowsTransparency="True"
    Background="Transparent"
    Foreground="{DynamicResource ForegroundBrush}"
    ResizeMode="NoResize"
    SizeToContent="WidthAndHeight"
    Topmost="True"
    WindowStyle="None">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!--  Material Design default theme  -->
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ComboBox.xaml" />
                <!--  Material Design dark theme  -->
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Dark.xaml" />
                <ResourceDictionary Source="/IssueManager;component/Views/Themes/DarkTheme.xaml" />
                <ResourceDictionary Source="/IssueManager;component/Views/Themes/LightTheme.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!--  Custom ActionButtonStyle  -->
            <Style x:Key="CustomActionButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="Width" Value="200" />
                <Setter Property="Height" Value="50" />
                <Setter Property="Margin" Value="0,5,0,0" />
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="Background" Value="{DynamicResource PrimaryBackgroundBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                <Setter Property="FontSize" Value="16" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border
                                x:Name="ButtonBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="5">
                                <ContentPresenter
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Content="{TemplateBinding Content}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <!--  Hover Effect  -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}" />
                                    <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource IconHoverBrush}" />
                                </Trigger>
                                <!--  Pressed Effect  -->
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource IconHoverBrush}" />
                                    <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="CustomCheckComboBoxStyle" TargetType="xctk:CheckComboBox">
                <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}" />
                <Setter Property="BorderBrush" Value="Gray" />
                <Setter Property="BorderThickness" Value="0.6" />
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                <Setter Property="Height" Value="20" />
                <Setter Property="Padding" Value="4,0,4,0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="xctk:CheckComboBox">
                            <Grid>
                                <!--  Toggle Button  -->
                                <ToggleButton
                                    x:Name="ToggleButton"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    FocusVisualStyle="{x:Null}"
                                    Foreground="{TemplateBinding Foreground}"
                                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ContentPresenter
                                        Margin="{TemplateBinding Padding}"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        Content="{TemplateBinding Text}" />
                                </ToggleButton>

                                <!--  Dropdown  -->
                                <Popup
                                    x:Name="Popup"
                                    AllowsTransparency="True"
                                    Focusable="False"
                                    IsOpen="{TemplateBinding IsDropDownOpen}"
                                    Placement="Bottom"
                                    StaysOpen="False">
                                    <Border
                                        Width="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"
                                        Background="{DynamicResource SecondaryBackgroundBrush}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}">
                                        <ScrollViewer>
                                            <ItemsPresenter />
                                        </ScrollViewer>
                                    </Border>
                                </Popup>
                            </Grid>

                            <!--  Triggers  -->
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="Gray" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ToggleButton" Property="Background" Value="{DynamicResource HighlightBrush}" />
                                    <Setter TargetName="ToggleButton" Property="BorderBrush" Value="{DynamicResource HighlightBrush}" />
                                </Trigger>
                                <Trigger Property="IsDropDownOpen" Value="True">
                                    <Setter TargetName="ToggleButton" Property="Background" Value="{DynamicResource HighlightBrush}" />
                                    <Setter TargetName="ToggleButton" Property="BorderBrush" Value="{DynamicResource HighlightBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  Custom Style for DataGrid Header  -->
            <Style x:Key="CustomDataGridColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
                <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}" />
                <!--  Set your desired background color  -->
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                <!--  Set your desired foreground color  -->
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Padding" Value="5" />
                <Setter Property="BorderBrush" Value="Gray" />
                <Setter Property="BorderThickness" Value="0,0,1,1" />
            </Style>
            <!--  Custom Style for Center-Aligned Cell Content  -->
            <Style x:Key="CenterAlignedCellStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="TextAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <!--  Custom Style for DataGrid  -->
            <Style
                x:Key="CustomDataGridStyle"
                BasedOn="{StaticResource {x:Type DataGrid}}"
                TargetType="{x:Type DataGrid}">
                <Setter Property="SelectionMode" Value="Single" />
                <Setter Property="SelectionUnit" Value="FullRow" />
            </Style>
            <!--  Global DarkThemeComboBox  -->
            <Style
                x:Key="DarkThemeComboBox"
                BasedOn="{StaticResource MaterialDesignComboBox}"
                TargetType="{x:Type ComboBox}">
                <!--  Base Properties  -->
                <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Padding" Value="2,0,2,0" />
                <Setter Property="FontSize" Value="12" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="materialDesign:HintAssist.IsFloating" Value="True" />
                <Setter Property="materialDesign:HintAssist.Foreground" Value="{DynamicResource ForegroundBrush}" />
                <!--  ItemContainerStyle for ComboBox Items  -->
                <Setter Property="ItemContainerStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type ComboBoxItem}">
                            <Setter Property="Padding" Value="0,2,0,2" />
                            <Setter Property="Margin" Value="0,1,0,1" />
                            <Setter Property="HorizontalContentAlignment" Value="Center" />
                            <Setter Property="VerticalContentAlignment" Value="Center" />
                            <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                            <Setter Property="BorderThickness" Value="0" />
                            <!--  Triggers for ComboBoxItem  -->
                            <Style.Triggers>
                                <!--  Mouse Over Trigger  -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource HighlightBrush}" />
                                    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                                </Trigger>
                                <!--  Selected Trigger  -->
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource HighlightBrush}" />
                                    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Setter.Value>
                </Setter>
                <!--  ControlTemplate for ComboBox  -->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBox}">
                            <Grid>
                                <!--  ComboBox Content  -->
                                <ToggleButton
                                    x:Name="ToggleButton"
                                    HorizontalContentAlignment="Center"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    FocusVisualStyle="{x:Null}"
                                    Foreground="{TemplateBinding Foreground}"
                                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                    <ContentPresenter
                                        Margin="{TemplateBinding Padding}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="Center"
                                        Content="{TemplateBinding SelectionBoxItem}"
                                        ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                        ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
                                </ToggleButton>
                                <!--  Dropdown Popup  -->
                                <Popup
                                    x:Name="Popup"
                                    AllowsTransparency="True"
                                    Focusable="False"
                                    IsOpen="{TemplateBinding IsDropDownOpen}"
                                    Placement="Bottom">
                                    <Border
                                        x:Name="PopupBorder"
                                        Width="{Binding ActualWidth, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                        Background="{DynamicResource SecondaryBackgroundBrush}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}">
                                        <ScrollViewer Margin="4,6,4,6">
                                            <StackPanel IsItemsHost="True" />
                                        </ScrollViewer>
                                    </Border>
                                </Popup>
                            </Grid>
                            <!--  Triggers for ComboBox  -->
                            <ControlTemplate.Triggers>
                                <!--  Disabled State Trigger  -->
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="Gray" />
                                </Trigger>
                                <!--  Mouse Over Trigger (Change Background to Red)  -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ToggleButton" Property="Background" Value="Red" />
                                    <Setter TargetName="ToggleButton" Property="BorderBrush" Value="Red" />
                                </Trigger>
                                <!--  DropDown Open Trigger  -->
                                <Trigger Property="IsDropDownOpen" Value="True">
                                    <Setter TargetName="ToggleButton" Property="Background" Value="{DynamicResource HighlightBrush}" />
                                    <Setter TargetName="ToggleButton" Property="BorderBrush" Value="{DynamicResource HighlightBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style
                x:Key="CustomTextBoxStyle"
                BasedOn="{StaticResource {x:Type TextBox}}"
                TargetType="{x:Type TextBox}">
                <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="TextAlignment" Value="Left" />
                <Setter Property="VerticalContentAlignment" Value="Top" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <Border
                                x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                                <ScrollViewer x:Name="PART_ContentHost" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <!--  Change border color on mouse over  -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource SelectionHoverBrush}" />
                                </Trigger>
                                <!--  Change border color on focus  -->
                                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource TextHighlightBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="CustomActionButtonStyle1" TargetType="{x:Type Button}">
                <Setter Property="Width" Value="200" />
                <Setter Property="Height" Value="50" />
                <Setter Property="Margin" Value="0,5,0,0" />
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="Background" Value="#D94446" />
                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                <Setter Property="Foreground" Value="Black" />
                <Setter Property="FontSize" Value="16" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border
                                x:Name="ButtonBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="5">
                                <ContentPresenter
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Content="{TemplateBinding Content}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <!--  Hover Effect  -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="#D9605C" />
                                    <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource IconHoverBrush}" />
                                </Trigger>
                                <!--  Pressed Effect  -->
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="#FA766E" />
                                    <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="CustomActionButtonStyle2" TargetType="{x:Type Button}">
                <Setter Property="Width" Value="200" />
                <Setter Property="Height" Value="50" />
                <Setter Property="Margin" Value="0,5,0,0" />
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="Background" Value="#42b362" />
                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                <Setter Property="Foreground" Value="Black" />
                <Setter Property="FontSize" Value="16" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border
                                x:Name="ButtonBorder2"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="5">
                                <ContentPresenter
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Content="{TemplateBinding Content}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <!--  Hover Effect  -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ButtonBorder2" Property="Background" Value="#63bf7d" />
                                    <Setter TargetName="ButtonBorder2" Property="BorderBrush" Value="{DynamicResource IconHoverBrush}" />
                                </Trigger>
                                <!--  Pressed Effect  -->
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="ButtonBorder2" Property="Background" Value="#62d983" />
                                    <Setter TargetName="ButtonBorder2" Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style
                x:Key="MultiRowHeaderStyle"
                BasedOn="{StaticResource CustomDataGridColumnHeaderStyle}"
                TargetType="{x:Type DataGridColumnHeader}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                            <Border
                                Background="{TemplateBinding Background}"
                                BorderBrush="Gray"
                                BorderThickness="0,0,1,1">
                                <Grid>
                                    <!--  Main Header Text  -->
                                    <TextBlock
                                        Grid.Row="0"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        FontWeight="Bold"
                                        Text="{TemplateBinding Content}"
                                        TextAlignment="Center"
                                        TextWrapping="Wrap" />
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>



            <!--  Custom Checkbox Style with Icons  -->
            <Style x:Key="CustomCheckboxStyle" TargetType="{x:Type CheckBox}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <Border
                                Padding="0"
                                Background="Transparent"
                                Cursor="Hand">
                                <Grid Background="Transparent">
                                    <StackPanel VerticalAlignment="Center" Orientation="Horizontal">
                                        <!--  Checkbox Icon  -->
                                        <materialDesign:PackIcon
                                            x:Name="CheckboxIcon"
                                            Width="25"
                                            Height="25"
                                            VerticalAlignment="Center"
                                            Foreground="{DynamicResource IconForegroundBrush}"
                                            Kind="CheckboxBlankOutline" />

                                        <!--  Checkbox Text  -->
                                        <TextBlock
                                            Margin="5,0,0,0"
                                            VerticalAlignment="Center"
                                            Foreground="{DynamicResource ForegroundBrush}"
                                            Text="{TemplateBinding Content}" />
                                    </StackPanel>

                                    <!--  Clickable Transparent Overlay  -->
                                    <Border
                                        x:Name="ClickableArea"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Stretch"
                                        Background="Transparent"
                                        Cursor="Hand" />
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <!--  Checked State  -->
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="CheckboxIcon" Property="Kind" Value="CheckboxMarkedOutline" />
                                    <Setter TargetName="CheckboxIcon" Property="Foreground" Value="{DynamicResource IconForegroundBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--  Custom Checkbox Style with Icons  -->
            <Style x:Key="CustomCheckboxStyleM" TargetType="{x:Type CheckBox}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <Border
                                Padding="0"
                                Background="Transparent"
                                Cursor="Hand">
                                <Grid Background="Transparent">
                                    <StackPanel VerticalAlignment="Center" Orientation="Horizontal">
                                        <!--  Checkbox Icon  -->
                                        <materialDesign:PackIcon
                                            x:Name="CheckboxIcon"
                                            Width="15"
                                            Height="15"
                                            VerticalAlignment="Center"
                                            Foreground="{DynamicResource IconForegroundBrush}"
                                            Kind="CheckboxBlankOutline" />

                                        <!--  Checkbox Text  -->
                                        <TextBlock
                                            Margin="5,0,0,0"
                                            VerticalAlignment="Center"
                                            Foreground="{DynamicResource ForegroundBrush}"
                                            Text="{TemplateBinding Content}" />
                                    </StackPanel>

                                    <!--  Clickable Transparent Overlay  -->
                                    <Border
                                        x:Name="ClickableArea"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Stretch"
                                        Background="Transparent"
                                        Cursor="Hand" />
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <!--  Checked State  -->
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="CheckboxIcon" Property="Kind" Value="CheckboxMarkedOutline" />
                                    <Setter TargetName="CheckboxIcon" Property="Foreground" Value="{DynamicResource IconForegroundBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </Window.Resources>
    <Grid Background="Transparent" ClipToBounds="True">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <!--  Title bar  -->
            <RowDefinition Height="*" />
            <!--  Content  -->
        </Grid.RowDefinitions>

        <!--  🔲 Outer Blur Border  -->
        <Border
            Grid.RowSpan="2"
            BorderBrush="{DynamicResource BorderBrush}"
            BorderThickness="2"
            CornerRadius="10"
            Opacity="0.7"
            SnapsToDevicePixels="True">
            <Border.Effect>
                <BlurEffect KernelType="Gaussian" Radius="2" />
            </Border.Effect>
        </Border>

        <!--  🔳 Title Bar  -->
        <local:TaskTitleBar
            Grid.Row="0"
            Height="30"
            Margin="2"
            Foreground="{DynamicResource ForegroundBrush}" />

        <!--  🟫 Main Content Border  -->
        <Border
            Grid.Row="1"
            Margin="2,-2,2,2"
            Background="{DynamicResource PrimaryBackgroundBrush}"
            CornerRadius="0,0,10,10">
            <Grid Margin="20,10,20,20">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <!--  Form inputs  -->
                <StackPanel Grid.Row="0" Margin="0,0,0,20">
                    <TextBlock Margin="0,0,0,5" Text="Projekt:" />
                    <ComboBox
                        x:Name="ProjectComboBox"
                        Height="25"
                        Style="{DynamicResource DarkThemeComboBox}" />

                    <TextBlock Margin="0,10,0,5" Text="Ülesande nimi:" />
                    <TextBox
                        x:Name="TaskNameTextBox"
                        Height="25"
                        MinWidth="200"
                        MaxWidth="200"
                        Style="{DynamicResource CustomTextBoxStyle}" />

                    <TextBlock Margin="0,10,0,5" Text="Ülesande kirjeldus:" />
                    <TextBox
                        x:Name="TaskDescriptionTextBox"
                        Height="100"
                        MinWidth="200"
                        MaxWidth="200"
                        AcceptsReturn="True"
                        Style="{DynamicResource CustomTextBoxStyle}"
                        TextWrapping="Wrap" />

                    <TextBlock Margin="0,10,0,5" Text="Määratud isik:" />
                    <ComboBox
                        x:Name="AssigneeComboBox"
                        Height="25"
                        Style="{DynamicResource DarkThemeComboBox}" />
                    <StackPanel Margin="0,10,0,0">
                        <TextBlock Margin="0,0,0,4" Text="Prioriteet:" />
                        <ComboBox
                            x:Name="PriorityComboBox"
                            Height="25"
                            Style="{DynamicResource DarkThemeComboBox}" />

                    </StackPanel>

                    <StackPanel>
                        <TextBlock Margin="0,10,0,5" Text="Silt:" />
                        <xctk:CheckComboBox
                            x:Name="LabelSelector"
                            Height="25"
                            Margin="0,0,0,10"
                            ItemsSource="{Binding AvailableLabels}"
                            SelectedItemsOverride="{Binding SelectedLabels}"
                            Style="{StaticResource CustomCheckComboBoxStyle}" />

                    </StackPanel>

                    <StackPanel HorizontalAlignment="Center">
                        <Image
                            x:Name="CapturedImagePreview"
                            Width="200"
                            Height="200"
                            Margin="0,10,0,0"
                            HorizontalAlignment="Center"
                            Stretch="Uniform"
                            Visibility="Visible" />

                    </StackPanel>


                </StackPanel>

                <!--  Buttons  -->
                <StackPanel
                    Grid.Row="2"
                    Margin="0,-10,0,0"
                    HorizontalAlignment="Center"
                    Orientation="Vertical">
                    <Button
                        Width="200"
                        Height="25"
                        Margin="0,0,0,20"
                        Click="Ristumine_Click"
                        Content="Loo Ristumine"
                        FontSize="14"
                        FontWeight="Bold"
                        Style="{DynamicResource CustomActionButtonStyle}" />
                    <StackPanel
                        Grid.Row="2"
                        HorizontalAlignment="Center"
                        Orientation="Horizontal">
                        <Button
                            Width="80"
                            Margin="0,0,10,0"
                            Click="Cancel_Click"
                            Content="Tühista"
                            FontSize="18"
                            FontWeight="Bold"
                            Style="{DynamicResource CustomActionButtonStyle1}" />
                        <Button
                            Width="80"
                            Margin="0,0,0,0"
                            Click="Create_Click"
                            Content="Loo"
                            FontSize="18"
                            FontWeight="Bold"
                            Style="{DynamicResource CustomActionButtonStyle2}" />
                    </StackPanel>
                </StackPanel>
            </Grid>
        </Border>
    </Grid>

</Window>
