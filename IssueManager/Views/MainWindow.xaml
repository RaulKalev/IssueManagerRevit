<Page
    x:Class="IssueManager.Views.DockablePage2"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:IssueManager.Views"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:models="clr-namespace:IssueManager.Models"
    Title="TitleNameTest"
    d:DesignHeight="450"
    d:DesignWidth="800"
    Background="WhiteSmoke"
    DataContext="{Binding RelativeSource={RelativeSource Self}}"
    mc:Ignorable="d">
    <Page.Resources>

        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!--  Material Design default theme  -->
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ComboBox.xaml" />
                <!--  Material Design dark theme  -->
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Dark.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ScrollViewer.xaml" />

                <ResourceDictionary Source="/IssueManager;component/Views/Themes/DarkTheme.xaml" />
                <ResourceDictionary Source="/IssueManager;component/Views/Themes/LightTheme.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!--  Your page-specific resources  -->
            <local:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
            <local:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" />
            <local:BoolToEditSaveConverter x:Key="BoolToEditSaveConverter" />

            <Storyboard x:Key="RotateIconStoryboard" RepeatBehavior="Forever">
                <DoubleAnimation
                    Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)"
                    From="0"
                    To="360"
                    Duration="0:0:1" />
            </Storyboard>


            <!--  Custom Style for DataGrid Header  -->
            <Style x:Key="CustomDataGridColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
                <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}" />
                <!--  Set your desired background color  -->
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                <!--  Set your desired foreground color  -->
                <Setter Property="FontWeight" Value="Bold" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="Padding" Value="5" />
                <Setter Property="BorderBrush" Value="Gray" />
                <Setter Property="BorderThickness" Value="0,0,1,1" />
            </Style>
            <!--  Custom Style for Center-Aligned Cell Content  -->
            <Style x:Key="CenterAlignedCellStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="TextAlignment" Value="Center" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <!--  Custom Style for DataGrid  -->
            <Style
                x:Key="CustomDataGridStyle"
                BasedOn="{StaticResource {x:Type DataGrid}}"
                TargetType="{x:Type DataGrid}">
                <Setter Property="SelectionMode" Value="Single" />
                <Setter Property="SelectionUnit" Value="FullRow" />
            </Style>
            <!--  Global DarkThemeComboBox  -->
            <Style
                x:Key="DarkThemeComboBox"
                BasedOn="{StaticResource MaterialDesignComboBox}"
                TargetType="{x:Type ComboBox}">
                <!--  Base Properties  -->
                <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Padding" Value="2,0,2,0" />
                <Setter Property="FontSize" Value="12" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="materialDesign:HintAssist.IsFloating" Value="True" />
                <Setter Property="materialDesign:HintAssist.Foreground" Value="{DynamicResource ForegroundBrush}" />
                <!--  ItemContainerStyle for ComboBox Items  -->
                <Setter Property="ItemContainerStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type ComboBoxItem}">
                            <Setter Property="Padding" Value="0,2,0,2" />
                            <Setter Property="Margin" Value="0,1,0,1" />
                            <Setter Property="HorizontalContentAlignment" Value="Center" />
                            <Setter Property="VerticalContentAlignment" Value="Center" />
                            <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                            <Setter Property="BorderThickness" Value="0" />
                            <!--  Triggers for ComboBoxItem  -->
                            <Style.Triggers>
                                <!--  Mouse Over Trigger  -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource HighlightBrush}" />
                                    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                                </Trigger>
                                <!--  Selected Trigger  -->
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource HighlightBrush}" />
                                    <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Setter.Value>
                </Setter>
                <!--  ControlTemplate for ComboBox  -->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBox}">
                            <Grid>
                                <!--  ComboBox Content  -->
                                <ToggleButton
                                    x:Name="ToggleButton"
                                    HorizontalContentAlignment="Center"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    FocusVisualStyle="{x:Null}"
                                    Foreground="{TemplateBinding Foreground}"
                                    IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                    <ContentPresenter
                                        Margin="{TemplateBinding Padding}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="Center"
                                        Content="{TemplateBinding SelectionBoxItem}"
                                        ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                        ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
                                </ToggleButton>
                                <!--  Dropdown Popup  -->
                                <Popup
                                    x:Name="Popup"
                                    AllowsTransparency="True"
                                    Focusable="False"
                                    IsOpen="{TemplateBinding IsDropDownOpen}"
                                    Placement="Bottom">
                                    <Border
                                        x:Name="PopupBorder"
                                        Width="{Binding ActualWidth, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                        Background="{DynamicResource SecondaryBackgroundBrush}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}">
                                        <ScrollViewer Margin="4,6,4,6">
                                            <StackPanel IsItemsHost="True" />
                                        </ScrollViewer>
                                    </Border>
                                </Popup>
                            </Grid>
                            <!--  Triggers for ComboBox  -->
                            <ControlTemplate.Triggers>
                                <!--  Disabled State Trigger  -->
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="Gray" />
                                </Trigger>
                                <!--  Mouse Over Trigger (Change Background to Red)  -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ToggleButton" Property="Background" Value="Red" />
                                    <Setter TargetName="ToggleButton" Property="BorderBrush" Value="Red" />
                                </Trigger>
                                <!--  DropDown Open Trigger  -->
                                <Trigger Property="IsDropDownOpen" Value="True">
                                    <Setter TargetName="ToggleButton" Property="Background" Value="{DynamicResource HighlightBrush}" />
                                    <Setter TargetName="ToggleButton" Property="BorderBrush" Value="{DynamicResource HighlightBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--  Custom TextBoxStyle  -->
            <Style
                x:Key="CustomTextBoxStyle"
                BasedOn="{StaticResource {x:Type TextBox}}"
                TargetType="{x:Type TextBox}">
                <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="TextAlignment" Value="Left" />
                <Setter Property="VerticalContentAlignment" Value="Top" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <Border
                                x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                                <ScrollViewer x:Name="PART_ContentHost" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <!--  Change border color on mouse over  -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource SelectionHoverBrush}" />
                                </Trigger>
                                <!--  Change border color on focus  -->
                                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource TextHighlightBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--  Custom ActionButtonStyle  -->
            <Style x:Key="CustomActionButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="Width" Value="200" />
                <Setter Property="Height" Value="50" />
                <Setter Property="Margin" Value="0,5,0,0" />
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="Background" Value="{DynamicResource PrimaryBackgroundBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
                <Setter Property="FontSize" Value="16" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border
                                x:Name="ButtonBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="5">
                                <ContentPresenter
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Content="{TemplateBinding Content}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <!--  Hover Effect  -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}" />
                                    <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource IconHoverBrush}" />
                                </Trigger>
                                <!--  Pressed Effect  -->
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource IconHoverBrush}" />
                                    <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--  Custom MultiRowHeaderStyle  -->
            <Style
                x:Key="MultiRowHeaderStyle"
                BasedOn="{StaticResource CustomDataGridColumnHeaderStyle}"
                TargetType="{x:Type DataGridColumnHeader}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                            <Border
                                Background="{TemplateBinding Background}"
                                BorderBrush="Gray"
                                BorderThickness="0,0,1,1">
                                <Grid>
                                    <!--  Main Header Text  -->
                                    <TextBlock
                                        Grid.Row="0"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        FontWeight="Bold"
                                        Text="{TemplateBinding Content}"
                                        TextAlignment="Center"
                                        TextWrapping="Wrap" />
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--  Custom Checkbox Style with Icons  -->
            <Style x:Key="CustomCheckboxStyle" TargetType="{x:Type CheckBox}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <Border
                                Padding="0"
                                Background="Transparent"
                                Cursor="Hand">
                                <Grid Background="Transparent">
                                    <StackPanel VerticalAlignment="Center" Orientation="Horizontal">
                                        <!--  Checkbox Icon  -->
                                        <materialDesign:PackIcon
                                            x:Name="CheckboxIcon"
                                            Width="25"
                                            Height="25"
                                            VerticalAlignment="Center"
                                            Foreground="{DynamicResource IconForegroundBrush}"
                                            Kind="CheckboxBlankOutline" />

                                        <!--  Checkbox Text  -->
                                        <TextBlock
                                            Margin="5,0,0,0"
                                            VerticalAlignment="Center"
                                            Foreground="{DynamicResource ForegroundBrush}"
                                            Text="{TemplateBinding Content}" />
                                    </StackPanel>

                                    <!--  Clickable Transparent Overlay  -->
                                    <Border
                                        x:Name="ClickableArea"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Stretch"
                                        Background="Transparent"
                                        Cursor="Hand" />
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <!--  Checked State  -->
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="CheckboxIcon" Property="Kind" Value="CheckboxMarkedOutline" />
                                    <Setter TargetName="CheckboxIcon" Property="Foreground" Value="{DynamicResource IconForegroundBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--  Custom Checkbox Style with Icons  -->
            <Style x:Key="CustomCheckboxStyleM" TargetType="{x:Type CheckBox}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <Border
                                Padding="0"
                                Background="Transparent"
                                Cursor="Hand">
                                <Grid Background="Transparent">
                                    <StackPanel VerticalAlignment="Center" Orientation="Horizontal">
                                        <!--  Checkbox Icon  -->
                                        <materialDesign:PackIcon
                                            x:Name="CheckboxIcon"
                                            Width="15"
                                            Height="15"
                                            VerticalAlignment="Center"
                                            Foreground="{DynamicResource IconForegroundBrush}"
                                            Kind="CheckboxBlankOutline" />

                                        <!--  Checkbox Text  -->
                                        <TextBlock
                                            Margin="5,0,0,0"
                                            VerticalAlignment="Center"
                                            Foreground="{DynamicResource ForegroundBrush}"
                                            Text="{TemplateBinding Content}" />
                                    </StackPanel>

                                    <!--  Clickable Transparent Overlay  -->
                                    <Border
                                        x:Name="ClickableArea"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Stretch"
                                        Background="Transparent"
                                        Cursor="Hand" />
                                </Grid>
                            </Border>

                            <ControlTemplate.Triggers>
                                <!--  Checked State  -->
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="CheckboxIcon" Property="Kind" Value="CheckboxMarkedOutline" />
                                    <Setter TargetName="CheckboxIcon" Property="Foreground" Value="{DynamicResource IconForegroundBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="ScrollBar">
                <Setter Property="Width" Value="3" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ScrollBar">
                            <Border Background="{DynamicResource SecondaryBackgroundBrush}" CornerRadius="0">
                                <!--  ✅ scroll area background  -->
                                <Grid>
                                    <Track x:Name="PART_Track" IsDirectionReversed="True">
                                        <Track.DecreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.LineUpCommand}" Visibility="Collapsed" />
                                        </Track.DecreaseRepeatButton>
                                        <Track.Thumb>
                                            <Thumb x:Name="ScrollBarThumb">
                                                <Thumb.Style>
                                                    <Style TargetType="Thumb">
                                                        <Setter Property="Height" Value="20" />
                                                        <Setter Property="Width" Value="10" />
                                                        <Setter Property="VerticalAlignment" Value="Top" />
                                                        <Setter Property="Background" Value="#888" />
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="Thumb">
                                                                    <Border
                                                                        x:Name="ThumbBorder"
                                                                        Margin="1"
                                                                        Background="{TemplateBinding Background}"
                                                                        CornerRadius="3" />
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Style.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter Property="Background" Value="#666" />
                                                            </Trigger>
                                                            <Trigger Property="IsDragging" Value="True">
                                                                <Setter Property="Background" Value="#444" />
                                                            </Trigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Thumb.Style>
                                            </Thumb>
                                        </Track.Thumb>
                                        <Track.IncreaseRepeatButton>
                                            <RepeatButton Command="{x:Static ScrollBar.LineDownCommand}" Visibility="Collapsed" />
                                        </Track.IncreaseRepeatButton>
                                    </Track>
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>



        </ResourceDictionary>
    </Page.Resources>

    <Border Margin="-10,0,-10,-10" Background="{DynamicResource PrimaryBackgroundBrush}">
        <Grid Margin="10">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <!--  Header  -->
                <RowDefinition Height="*" />
                <!--  Scrollable content  -->
                <RowDefinition Height="Auto" />
                <!--  Footer  -->
            </Grid.RowDefinitions>
            <Border
                Grid.Row="0"
                Margin="-11,-11,-11,0"
                Padding="5"
                Background="{DynamicResource SecondaryBackgroundBrush}"
                BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="1">

                <!--  ✅ Toolbar (Row 0)  -->
                <Grid Grid.Row="0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>


                    <Button
                        x:Name="ConnectToJira"
                        Grid.Column="0"
                        Width="15"
                        Height="15"
                        Margin="10,0,0,5"
                        Background="Transparent"
                        Click="ConnectToJira_Click"
                        Content="Connect"
                        ToolTip="Ühenda Jiraga">
                        <Button.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1.3" ScaleY="1.3" />
                                <SkewTransform />
                                <RotateTransform />
                                <TranslateTransform X="0" />
                            </TransformGroup>
                        </Button.RenderTransform>
                        <Button.Template>
                            <ControlTemplate TargetType="Button">
                                <Grid Background="Transparent">
                                    <materialDesign:PackIcon
                                        x:Name="ConnectToJiraButton"
                                        Width="15"
                                        Height="15"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Foreground="{DynamicResource IconForegroundBrush}"
                                        Kind="Connection" />
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <!--  Hover Effect  -->
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="ConnectToJiraButton" Property="Foreground" Value="{DynamicResource IconHoverBrush}" />
                                    </Trigger>
                                    <!--  Pressed Effect  -->
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter TargetName="ConnectToJiraButton" Property="Foreground" Value="{DynamicResource IconPressedBrush}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                    <Button
                        Grid.Column="1"
                        Width="15"
                        Height="15"
                        Margin="10,-5,10,0"
                        Click="RefreshButton_Click"
                        Content="Refresh"
                        ToolTip="Värskenda vaadet">
                        <Button.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1.3" ScaleY="1.3" />
                                <SkewTransform />
                                <RotateTransform />
                                <TranslateTransform X="0" />
                            </TransformGroup>
                        </Button.RenderTransform>
                        <Button.Template>
                            <ControlTemplate TargetType="Button">
                                <Grid Background="Transparent">
                                    <materialDesign:PackIcon
                                        x:Name="RefreshButton"
                                        Width="15"
                                        Height="15"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Foreground="{DynamicResource IconForegroundBrush}"
                                        Kind="Refresh" />
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <!--  Hover Effect  -->
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="RefreshButton" Property="Foreground" Value="{DynamicResource IconHoverBrush}" />
                                    </Trigger>
                                    <!--  Pressed Effect  -->
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter TargetName="RefreshButton" Property="Foreground" Value="{DynamicResource IconPressedBrush}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>

                    <ComboBox
                        x:Name="ProjectComboBox"
                        Grid.Column="2"
                        Width="175"
                        SelectionChanged="ProjectComboBox_SelectionChanged"
                        Style="{StaticResource DarkThemeComboBox}"
                        ToolTip="Vali projekt"
                        Visibility="Collapsed" />
                    <materialDesign:PackIcon
                        x:Name="ConnectionStatusIcon"
                        Grid.Column="3"
                        Width="16"
                        Height="16"
                        Margin="5,0,0,0"
                        VerticalAlignment="Center"
                        Foreground="Gray"
                        Kind="Loading"
                        RenderTransformOrigin="0.5,0.5"
                        Visibility="Collapsed">
                        <materialDesign:PackIcon.RenderTransform>
                            <RotateTransform />
                        </materialDesign:PackIcon.RenderTransform>
                    </materialDesign:PackIcon>

                    <Button
                        Grid.Column="4"
                        Width="15"
                        Height="15"
                        Margin="10,-5,15,0"
                        Click="FilterButton_Click"
                        ToolTip="Filtreeri ülesandeid">
                        Content="Refresh">
                        <Button.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1.3" ScaleY="1.3" />
                                <SkewTransform />
                                <RotateTransform />
                                <TranslateTransform X="0" />
                            </TransformGroup>
                        </Button.RenderTransform>
                        <Button.Template>
                            <ControlTemplate TargetType="Button">
                                <Grid Background="Transparent">
                                    <materialDesign:PackIcon
                                        x:Name="FilterButton"
                                        Width="15"
                                        Height="15"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Foreground="{DynamicResource IconForegroundBrush}"
                                        Kind="FilterCogOutline" />
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <!--  Hover Effect  -->
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="FilterButton" Property="Foreground" Value="{DynamicResource IconHoverBrush}" />
                                    </Trigger>
                                    <!--  Pressed Effect  -->
                                    <Trigger Property="IsPressed" Value="True">
                                        <Setter TargetName="FilterButton" Property="Foreground" Value="{DynamicResource IconPressedBrush}" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>
                    <ToggleButton
                        x:Name="ThemeToggleButton"
                        Grid.Column="5"
                        Width="28"
                        Height="15.5"
                        Margin="0,0,10,0"
                        Background="Transparent"
                        BorderBrush="Transparent"
                        Click="ToggleTheme_Click"
                        DockPanel.Dock="Right"
                        IsChecked="True"
                        ToolTip="Must / Valge">

                        <ToggleButton.Template>
                            <ControlTemplate TargetType="ToggleButton">
                                <Grid Background="Transparent">
                                    <!--  Dynamic Icon Based on Toggle State  -->
                                    <materialDesign:PackIcon
                                        x:Name="ThemeToggleIcon"
                                        Width="30"
                                        Height="30"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Foreground="{DynamicResource IconForegroundBrush}"
                                        Kind="ToggleSwitchOffOutline" />
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsChecked" Value="True">
                                        <Setter TargetName="ThemeToggleIcon" Property="Kind" Value="ToggleSwitchOffOutline" />
                                    </Trigger>
                                    <Trigger Property="IsChecked" Value="False">
                                        <Setter TargetName="ThemeToggleIcon" Property="Kind" Value="ToggleSwitchOutline" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </ToggleButton.Template>
                    </ToggleButton>
                </Grid>
            </Border>
            <!--  ✅ Scrollable Issue Cards (Row 1)  -->
            <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto">

                <ItemsControl x:Name="IssueCardsPanel" Background="{DynamicResource PrimaryBackgroundBrush}">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="{x:Type models:JiraIssue}">
                            <Border
                                Margin="15,5,15,5"
                                Padding="10"
                                Background="{DynamicResource SecondaryBackgroundBrush}"
                                BorderBrush="Gray"
                                BorderThickness="1"
                                CornerRadius="6">

                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <!--  LEFT: Editable fields  -->
                                    <StackPanel Grid.Column="0" Margin="0,0,10,0">
                                        <!--  Summary (read-only)  -->
                                        <StackPanel HorizontalAlignment="Left" Orientation="Horizontal">
                                            <TextBlock
                                                FontSize="14"
                                                FontWeight="Bold"
                                                Foreground="{DynamicResource ForegroundBrush}"
                                                Text="{Binding Summary}" />

                                            <ToggleButton
                                                Grid.Column="4"
                                                Width="19"
                                                Height="19"
                                                Margin="10,0,0,0"
                                                Command="{Binding ToggleEditCommand}"
                                                Content="{Binding IsEditing, Converter={StaticResource BoolToEditSaveConverter}}">

                                                <ToggleButton.Template>
                                                    <ControlTemplate TargetType="ToggleButton">
                                                        <Grid Background="Transparent">
                                                            <!--  Dynamic Icon Based on Toggle State  -->
                                                            <materialDesign:PackIcon
                                                                x:Name="EditToggleIcon"
                                                                Width="19"
                                                                Height="19"
                                                                HorizontalAlignment="Center"
                                                                VerticalAlignment="Center"
                                                                Foreground="{DynamicResource IconForegroundBrush}"
                                                                Kind="Edit" />
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Setter TargetName="EditToggleIcon" Property="Foreground" Value="{DynamicResource IconHoverBrush}" />
                                                            </Trigger>
                                                            <!--  Pressed Effect  -->
                                                            <Trigger Property="IsPressed" Value="True">
                                                                <Setter TargetName="EditToggleIcon" Property="Foreground" Value="{DynamicResource IconPressedBrush}" />
                                                            </Trigger>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Setter TargetName="EditToggleIcon" Property="Kind" Value="ContentSave" />
                                                            </Trigger>
                                                            <Trigger Property="IsChecked" Value="False">
                                                                <Setter TargetName="EditToggleIcon" Property="Kind" Value="Edit" />
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </ToggleButton.Template>
                                            </ToggleButton>
                                            <CheckBox
                                                Margin="10,-2,0,0"
                                                VerticalAlignment="Center"
                                                Click="CheckBox_Click"
                                                Content="{Binding Name}"
                                                IsChecked="{Binding IsChecked, Mode=TwoWay}"
                                                Style="{StaticResource CustomCheckboxStyle}"
                                                ToolTip="Märgi tehtuks" />
                                        </StackPanel>

                                        <!--  Description  -->
                                        <TextBlock
                                            Margin="0,5,0,5"
                                            Foreground="{DynamicResource ForegroundBrush}"
                                            Text="{Binding Description}"
                                            TextWrapping="Wrap"
                                            Visibility="{Binding IsEditing, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
                                        <TextBox
                                            Width="Auto"
                                            Margin="0,5,0,5"
                                            AcceptsReturn="True"
                                            Foreground="{DynamicResource ForegroundBrush}"
                                            Style="{DynamicResource CustomTextBoxStyle}"
                                            Text="{Binding Description, UpdateSourceTrigger=PropertyChanged}"
                                            TextWrapping="Wrap"
                                            Visibility="{Binding IsEditing, Converter={StaticResource BoolToVisibilityConverter}}" />

                                        <!--  Assignee  -->
                                        <TextBlock
                                            FontWeight="SemiBold"
                                            Foreground="{DynamicResource ForegroundBrush}"
                                            Text="Assigned to:" />
                                        <TextBlock
                                            Foreground="{DynamicResource ForegroundBrush}"
                                            Text="{Binding Assignee}"
                                            Visibility="{Binding IsEditing, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
                                        <ComboBox
                                            DisplayMemberPath="DisplayName"
                                            ItemsSource="{Binding AllAssignees}"
                                            SelectedValue="{Binding AssigneeAccountId}"
                                            SelectedValuePath="AccountId"
                                            Style="{StaticResource DarkThemeComboBox}"
                                            Visibility="{Binding IsEditing, Converter={StaticResource BoolToVisibilityConverter}}" />

                                        <!--  Reporter (read-only)  -->
                                        <TextBlock
                                            Margin="0,5,0,0"
                                            FontSize="10"
                                            FontWeight="SemiBold"
                                            Foreground="{DynamicResource ForegroundBrush}"
                                            Text="Created by:" />
                                        <TextBlock
                                            FontSize="10"
                                            Foreground="{DynamicResource ForegroundBrush}"
                                            Text="{Binding Reporter}" />

                                        <!--  Status  -->
                                        <TextBlock
                                            Margin="0,5,0,0"
                                            FontWeight="Bold"
                                            Foreground="{DynamicResource TextHighlightBrush}"
                                            Text="{Binding StatusCategory}"
                                            Visibility="{Binding IsEditing, Converter={StaticResource InverseBoolToVisibilityConverter}}" />
                                        <ComboBox
                                            ItemsSource="{Binding AllStatuses}"
                                            SelectedItem="{Binding StatusCategory}"
                                            Style="{StaticResource DarkThemeComboBox}"
                                            Visibility="{Binding IsEditing, Converter={StaticResource BoolToVisibilityConverter}}" />
                                        <TextBlock
                                            Margin="0,4,0,0"
                                            FontStyle="Italic"
                                            Foreground="Gray"
                                            Text="{Binding LabelsText}" />


                                    </StackPanel>

                                    <!--  RIGHT: Images  -->
                                    <StackPanel Grid.Column="1" Orientation="Vertical">
                                        <ItemsControl ItemsSource="{Binding ImageBitmaps}">
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <StackPanel Orientation="Vertical" />
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                            <ItemsControl.ItemTemplate>
                                                <DataTemplate>
                                                    <Image
                                                        Width="100"
                                                        Height="100"
                                                        Margin="0,0,0,5"
                                                        Source="{Binding}"
                                                        Stretch="Uniform" />
                                                </DataTemplate>
                                            </ItemsControl.ItemTemplate>
                                        </ItemsControl>


                                    </StackPanel>
                                </Grid>

                            </Border>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </ScrollViewer>
            <Grid Grid.Row="3">
                <Border
                    Height="30"
                    Margin="-1,0,-1,-1"
                    Background="{DynamicResource SecondaryBackgroundBrush}"
                    BorderBrush="{DynamicResource BorderBrush}"
                    BorderThickness="1">
                    <Grid Grid.Row="3">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Button
                            x:Name="CreateJiraTask"
                            Grid.Column="0"
                            Width="15"
                            Height="15"
                            Margin="10,0,0,5"
                            Background="Transparent"
                            Click="CreateTaskButton_Click"
                            Content="Connect"
                            ToolTip="Loo uus ülesanne">
                            <Button.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="1.3" ScaleY="1.3" />
                                    <SkewTransform />
                                    <RotateTransform />
                                    <TranslateTransform X="0" />
                                </TransformGroup>
                            </Button.RenderTransform>
                            <Button.Template>
                                <ControlTemplate TargetType="Button">
                                    <Grid Background="Transparent">
                                        <materialDesign:PackIcon
                                            x:Name="ConnectToJiraButton"
                                            Width="15"
                                            Height="15"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Center"
                                            Foreground="{DynamicResource IconForegroundBrush}"
                                            Kind="InvoiceTextPlusOutline" />
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <!--  Hover Effect  -->
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="ConnectToJiraButton" Property="Foreground" Value="{DynamicResource IconHoverBrush}" />
                                        </Trigger>
                                        <!--  Pressed Effect  -->
                                        <Trigger Property="IsPressed" Value="True">
                                            <Setter TargetName="ConnectToJiraButton" Property="Foreground" Value="{DynamicResource IconPressedBrush}" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                    </Grid>
                </Border>
            </Grid>
        </Grid>

    </Border>

</Page>
